{
  "version": 3,
  "sources": ["../../vuetify/src/components/VInput/InputIcon.tsx", "../../vuetify/src/composables/focus.ts"],
  "sourcesContent": ["import { VIcon } from '@/components/VIcon'\nimport { useLocale } from '@/composables/locale'\nimport type { IconValue } from '@/composables/icons'\n\ntype names = 'clear' | 'prepend' | 'append' | 'appendInner' | 'prependInner'\n\ntype EventProp<T = (...args: any[]) => any> = T | T[]\ntype InputIconProps<T extends names> = {\n  label: string | undefined\n} & {\n  [K in `${T}Icon`]: IconValue | undefined\n} & {\n  [K in `onClick:${T}`]: EventProp | undefined\n}\n\ntype Listeners<T extends {}, U = keyof T> = U extends `onClick:${infer V extends names}` ? V : never\n\nexport function useInputIcon<T extends {}, K extends names = Listeners<T>> (props: T & InputIconProps<K>) {\n  const { t } = useLocale()\n\n  function InputIcon ({ name }: { name: Extract<names, K> }) {\n    const localeKey = {\n      prepend: 'prependAction',\n      prependInner: 'prependAction',\n      append: 'appendAction',\n      appendInner: 'appendAction',\n      clear: 'clear',\n    }[name]\n    const listener = props[`onClick:${name}`]\n    const label = listener && localeKey\n      ? t(`$vuetify.input.${localeKey}`, props.label ?? '')\n      : undefined\n\n    return (\n      <VIcon\n        icon={ props[`${name}Icon`] }\n        aria-label={ label }\n        onClick={ listener }\n      />\n    )\n  }\n\n  return { InputIcon }\n}\n", "// Components\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nexport interface FocusProps {\n  focused: boolean\n  'onUpdate:focused': ((val: boolean) => void) | undefined\n}\n\n// Composables\nexport const makeFocusProps = propsFactory({\n  focused: Boolean,\n}, 'focus')\n\nexport function useFocus (\n  props: FocusProps,\n  name = getCurrentInstanceName()\n) {\n  const isFocused = useProxiedModel(props, 'focused')\n  const focusClasses = computed(() => {\n    return ({\n      [`${name}--focused`]: isFocused.value,\n    })\n  })\n\n  function focus () {\n    isFocused.value = true\n  }\n\n  function blur () {\n    isFocused.value = false\n  }\n\n  return { focusClasses, isFocused, focus, blur }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAiBO,SAASA,aAA4DC,OAA8B;AACxG,QAAM;IAAEC;EAAE,IAAIC,UAAS;AAEvB,WAASC,UAAS,MAAyC;;AAAA,QAAvC;MAAEC;IAAkC,IAAC;AACvD,UAAMC,YAAY;MAChBC,SAAS;MACTC,cAAc;MACdC,QAAQ;MACRC,aAAa;MACbC,OAAO;IACT,EAAEN;AACF,UAAMO,WAAWX,MAAO,WAAUI;AAClC,UAAMQ,QAAQD,YAAYN,YACtBJ,EAAG,kBAAiBI,cAAaL,WAAMY,UAANZ,YAAe,EAAE,IAClDa;AAEJ,WAAA,YAAA,OAAA;MAAA,QAEWb,MAAO,GAAEI;MAAW,cACdQ;MAAK,WACRD;IAAQ,GAAA,IAAA;EAGxB;AAEA,SAAO;IAAER;EAAU;AACrB;;;AC7BO,IAAMW,iBAAiBC,aAAa;EACzCC,SAASC;AACX,GAAG,OAAO;AAEH,SAASC,SACdC,OAEA;AAAA,MADAC,OAAI,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KAAGC,uBAAsB;AAE7B,QAAMC,YAAYC,gBAAgBJ,OAAO,SAAS;AAClD,QAAMK,eAAeC,SAAS,MAAM;AAClC,WAAQ;MACN,CAAE,GAAEL,kBAAkBE,UAAUI;IAClC;EACF,CAAC;AAED,WAASC,QAAS;AAChBL,cAAUI,QAAQ;EACpB;AAEA,WAASE,OAAQ;AACfN,cAAUI,QAAQ;EACpB;AAEA,SAAO;IAAEF;IAAcF;IAAWK;IAAOC;EAAK;AAChD;",
  "names": ["useInputIcon", "props", "t", "useLocale", "InputIcon", "name", "localeKey", "prepend", "prependInner", "append", "appendInner", "clear", "listener", "label", "undefined", "makeFocusProps", "propsFactory", "focused", "Boolean", "useFocus", "props", "name", "getCurrentInstanceName", "isFocused", "useProxiedModel", "focusClasses", "computed", "value", "focus", "blur"]
}
