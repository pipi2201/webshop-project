import {
  VSelectionControlGroup,
  filterControlProps,
  makeSelectionControlGroupProps
} from "./chunk-BKENOLDP.js";
import {
  VLabel
} from "./chunk-A25CNYXK.js";
import {
  VInput,
  filterInputProps,
  makeVInputProps
} from "./chunk-OWROJV25.js";
import "./chunk-4BH643KV.js";
import "./chunk-SNUH6NQQ.js";
import "./chunk-Q5B2IRBZ.js";
import "./chunk-67CJRPA7.js";
import "./chunk-OHIEVXKB.js";
import "./chunk-RWNLLWN7.js";
import "./chunk-L5LL2HJQ.js";
import "./chunk-2OO5M33P.js";
import "./chunk-SKZZHHYJ.js";
import {
  IconValue
} from "./chunk-VE7U5HGY.js";
import "./chunk-KFIFTEKD.js";
import {
  useProxiedModel
} from "./chunk-IRL3MIR2.js";
import "./chunk-5S3URZJR.js";
import "./chunk-N5JMDTTN.js";
import "./chunk-RQKEQQT3.js";
import {
  filterInputAttrs,
  genericComponent,
  getUid,
  omit,
  useRender
} from "./chunk-QFN5MEKQ.js";
import {
  Fragment,
  computed,
  createVNode,
  mergeProps
} from "./chunk-SE5EWVSA.js";
import "./chunk-FAW2VN4A.js";

// node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.mjs
import "/home/ines/webshop/node_modules/vuetify/lib/components/VRadioGroup/VRadioGroup.css";
var VRadioGroup = genericComponent()({
  name: "VRadioGroup",
  inheritAttrs: false,
  props: {
    height: {
      type: [Number, String],
      default: "auto"
    },
    ...makeVInputProps(),
    ...omit(makeSelectionControlGroupProps(), ["multiple"]),
    trueIcon: {
      type: IconValue,
      default: "$radioOn"
    },
    falseIcon: {
      type: IconValue,
      default: "$radioOff"
    },
    type: {
      type: String,
      default: "radio"
    }
  },
  emits: {
    "update:modelValue": (val) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const uid = getUid();
    const id = computed(() => props.id || `radio-group-${uid}`);
    const model = useProxiedModel(props, "modelValue");
    useRender(() => {
      const [inputAttrs, controlAttrs] = filterInputAttrs(attrs);
      const [inputProps, _1] = filterInputProps(props);
      const [controlProps, _2] = filterControlProps({
        ...props,
        multiple: false
      });
      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      return createVNode(VInput, mergeProps({
        "class": "v-radio-group"
      }, inputAttrs, inputProps, {
        "modelValue": model.value,
        "onUpdate:modelValue": ($event) => model.value = $event,
        "id": id.value
      }), {
        ...slots,
        default: (_ref2) => {
          let {
            id: id2,
            messagesId,
            isDisabled,
            isReadonly
          } = _ref2;
          return createVNode(Fragment, null, [label && createVNode(VLabel, {
            "id": id2.value
          }, {
            default: () => [label]
          }), createVNode(VSelectionControlGroup, mergeProps(controlProps, {
            "id": id2.value,
            "aria-describedby": messagesId.value,
            "defaultsTarget": "VRadio",
            "trueIcon": props.trueIcon,
            "falseIcon": props.falseIcon,
            "type": props.type,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value,
            "aria-labelledby": label ? id2.value : void 0
          }, controlAttrs, {
            "modelValue": model.value,
            "onUpdate:modelValue": ($event) => model.value = $event
          }), slots)]);
        }
      });
    });
    return {};
  }
});
export {
  VRadioGroup
};
//# sourceMappingURL=vuetify_lib_components_VRadioGroup_index__mjs.js.map
