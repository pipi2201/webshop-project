{
  "version": 3,
  "sources": ["../../vuetify/src/locale/adapters/vuetify.ts", "../../vuetify/src/composables/locale.ts"],
  "sourcesContent": ["import { ref, watch } from 'vue'\nimport { consoleError, consoleWarn, getObjectValueByPath } from '@/util'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport en from '@/locale/en'\n\nimport type { Ref } from 'vue'\nimport type { LocaleInstance, LocaleMessages, LocaleOptions } from '@/composables/locale'\n\nconst LANG_PREFIX = '$vuetify.'\n\nconst replace = (str: string, params: unknown[]) => {\n  return str.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n    return String(params[+index])\n  })\n}\n\nconst createTranslateFunction = (\n  current: Ref<string>,\n  fallback: Ref<string>,\n  messages: Ref<LocaleMessages>,\n) => {\n  return (key: string, ...params: unknown[]) => {\n    if (!key.startsWith(LANG_PREFIX)) {\n      return replace(key, params)\n    }\n\n    const shortKey = key.replace(LANG_PREFIX, '')\n    const currentLocale = current.value && messages.value[current.value]\n    const fallbackLocale = fallback.value && messages.value[fallback.value]\n\n    let str: string = getObjectValueByPath(currentLocale, shortKey, null)\n\n    if (!str) {\n      consoleWarn(`Translation key \"${key}\" not found in \"${current.value}\", trying fallback locale`)\n      str = getObjectValueByPath(fallbackLocale, shortKey, null)\n    }\n\n    if (!str) {\n      consoleError(`Translation key \"${key}\" not found in fallback`)\n      str = key\n    }\n\n    if (typeof str !== 'string') {\n      consoleError(`Translation key \"${key}\" has a non-string value`)\n      str = key\n    }\n\n    return replace(str, params)\n  }\n}\n\nfunction createNumberFunction (current: Ref<string>, fallback: Ref<string>) {\n  return (value: number, options?: Intl.NumberFormatOptions) => {\n    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options)\n\n    return numberFormat.format(value)\n  }\n}\n\nfunction useProvided <T> (props: any, prop: string, provided: Ref<T>) {\n  const internal = useProxiedModel(props, prop, props[prop] ?? provided.value)\n\n  // TODO: Remove when defaultValue works\n  internal.value = props[prop] ?? provided.value\n\n  watch(provided, v => {\n    if (props[prop] == null) {\n      internal.value = provided.value\n    }\n  })\n\n  return internal as Ref<T>\n}\n\nfunction createProvideFunction (state: { current: Ref<string>, fallback: Ref<string>, messages: Ref<LocaleMessages> }) {\n  return (props: LocaleOptions): LocaleInstance => {\n    const current = useProvided(props, 'locale', state.current)\n    const fallback = useProvided(props, 'fallback', state.fallback)\n    const messages = useProvided(props, 'messages', state.messages)\n\n    return {\n      name: 'vuetify',\n      current,\n      fallback,\n      messages,\n      t: createTranslateFunction(current, fallback, messages),\n      n: createNumberFunction(current, fallback),\n      provide: createProvideFunction({ current, fallback, messages }),\n    }\n  }\n}\n\nexport function createVuetifyAdapter (options?: LocaleOptions): LocaleInstance {\n  const current = ref(options?.locale ?? 'en')\n  const fallback = ref(options?.fallback ?? 'en')\n  const messages = ref({ en, ...options?.messages })\n\n  return {\n    name: 'vuetify',\n    current,\n    fallback,\n    messages,\n    t: createTranslateFunction(current, fallback, messages),\n    n: createNumberFunction(current, fallback),\n    provide: createProvideFunction({ current, fallback, messages }),\n  }\n}\n", "import { computed, inject, provide, ref } from 'vue'\nimport { createVuetifyAdapter } from '@/locale/adapters/vuetify'\nimport { defaultRtl } from '@/locale'\n\nimport type { InjectionKey, Ref } from 'vue'\n\nexport interface LocaleMessages {\n  [key: string]: LocaleMessages | string\n}\n\nexport interface LocaleOptions {\n  messages?: LocaleMessages\n  locale?: string\n  fallback?: string\n  adapter?: LocaleInstance\n}\n\nexport interface LocaleInstance {\n  name: string\n  messages: Ref<LocaleMessages>\n  current: Ref<string>\n  fallback: Ref<string>\n  t: (key: string, ...params: unknown[]) => string\n  n: (value: number) => string\n  provide: (props: LocaleOptions) => LocaleInstance\n}\n\nexport const LocaleSymbol: InjectionKey<LocaleInstance & RtlInstance> = Symbol.for('vuetify:locale')\n\nfunction isLocaleInstance (obj: any): obj is LocaleInstance {\n  return obj.name != null\n}\n\nexport function createLocale (options?: LocaleOptions & RtlOptions) {\n  const i18n = options?.adapter && isLocaleInstance(options?.adapter) ? options?.adapter : createVuetifyAdapter(options)\n  const rtl = createRtl(i18n, options)\n\n  return { ...i18n, ...rtl }\n}\n\nexport function useLocale () {\n  const locale = inject(LocaleSymbol)\n\n  if (!locale) throw new Error('[Vuetify] Could not find injected locale instance')\n\n  return locale\n}\n\nexport function provideLocale (props: LocaleOptions & RtlProps) {\n  const locale = inject(LocaleSymbol)\n\n  if (!locale) throw new Error('[Vuetify] Could not find injected locale instance')\n\n  const i18n = locale.provide(props)\n  const rtl = provideRtl(i18n, locale.rtl, props)\n\n  const data = { ...i18n, ...rtl }\n\n  provide(LocaleSymbol, data)\n\n  return data\n}\n\n// RTL\n\nexport interface RtlOptions {\n  rtl?: Record<string, boolean>\n}\n\nexport interface RtlProps {\n  rtl?: boolean\n}\n\nexport interface RtlInstance {\n  isRtl: Ref<boolean>\n  rtl: Ref<Record<string, boolean>>\n  rtlClasses: Ref<string>\n}\n\nexport const RtlSymbol: InjectionKey<RtlInstance> = Symbol.for('vuetify:rtl')\n\nexport function createRtl (i18n: LocaleInstance, options?: RtlOptions): RtlInstance {\n  const rtl = ref(options?.rtl ?? defaultRtl)\n  const isRtl = computed(() => rtl.value[i18n.current.value] ?? false)\n\n  return {\n    isRtl,\n    rtl,\n    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`),\n  }\n}\n\nexport function provideRtl (locale: LocaleInstance, rtl: RtlInstance['rtl'], props: RtlProps): RtlInstance {\n  const isRtl = computed(() => props.rtl ?? rtl.value[locale.current.value] ?? false)\n\n  return {\n    isRtl,\n    rtl,\n    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`),\n  }\n}\n\nexport function useRtl () {\n  const locale = inject(LocaleSymbol)\n\n  if (!locale) throw new Error('[Vuetify] Could not find injected rtl instance')\n\n  return { isRtl: locale.isRtl, rtlClasses: locale.rtlClasses }\n}\n"],
  "mappings": "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",
  "names": ["LANG_PREFIX", "replace", "str", "params", "match", "index", "String", "createTranslateFunction", "current", "fallback", "messages", "key", "startsWith", "shortKey", "currentLocale", "value", "fallbackLocale", "getObjectValueByPath", "consoleWarn", "consoleError", "createNumberFunction", "options", "numberFormat", "Intl", "NumberFormat", "format", "useProvided", "props", "prop", "provided", "internal", "useProxiedModel", "watch", "v", "createProvideFunction", "state", "name", "t", "n", "provide", "createVuetifyAdapter", "ref", "locale", "en", "LocaleSymbol", "Symbol", "for", "isLocaleInstance", "obj", "name", "createLocale", "options", "i18n", "adapter", "createVuetifyAdapter", "rtl", "createRtl", "useLocale", "locale", "inject", "Error", "RtlSymbol", "Symbol", "for", "createRtl", "i18n", "options", "rtl", "ref", "defaultRtl", "isRtl", "computed", "_a", "value", "current", "rtlClasses", "useRtl", "locale", "inject", "LocaleSymbol", "Error", "isRtl", "rtlClasses"]
}
